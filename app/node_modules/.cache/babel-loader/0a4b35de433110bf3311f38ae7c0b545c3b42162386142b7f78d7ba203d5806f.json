{"ast":null,"code":"var _jsxFileName = \"/Users/ilyashilov/Documents/projects/ub-hacking-create-your-repo-here-koozie/app/src/components/pages/home/home.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\n\n// Define default values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOX_WIDTH = 200;\nconst BOX_HEIGHT = 200;\nconst MIN_BOX_WIDTH = 150; // Minimum box width before we reduce the number of circles per row\nconst MAX_CIRCLES_PER_ROW = 3; // Max number of circles per row\n\n// Random position generation for each circle within the bounding box\nfunction generateRandomPositionInBox() {\n  const top = Math.floor(Math.random() * (BOX_HEIGHT - 100)); // Adjust for button height\n  const left = Math.floor(Math.random() * (BOX_WIDTH - 100)); // Adjust for button width\n  return {\n    top,\n    left\n  };\n}\n\n// Random scale generation for each circle (between 1 and 1.2 for subtle size variations)\nfunction generateRandomScale() {\n  return 1 + Math.random() * 0.5; // Random scale between 1 and 1.5\n}\n\n// Random wiggle values for animation\nfunction generateRandomWiggle() {\n  return Math.random() * 10 - 5; // Random wiggle value between -5 and 5\n}\n\n// Random size for each circle (between 80px and 120px)\nfunction generateRandomSize() {\n  return Math.floor(Math.random() * (120 - 80 + 1)) + 80; // Random size between 80px and 120px\n}\nfunction PulsatingButton({\n  text,\n  name,\n  size\n}) {\n  _s();\n  const [position] = useState(generateRandomPositionInBox); // Get random position for each circle\n  const [scale] = useState(generateRandomScale); // Random scale factor\n\n  return /*#__PURE__*/_jsxDEV(motion.button, {\n    style: {\n      position: 'absolute',\n      top: position.top,\n      left: position.left,\n      width: size,\n      // Set circle size\n      height: size,\n      // Set circle size\n      borderRadius: '50%',\n      backgroundColor: '#1A06D0',\n      // Default background color\n      color: 'white',\n      fontSize: '16px',\n      fontWeight: 'bold',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      border: 'none',\n      cursor: 'pointer',\n      outline: 'none'\n    },\n    animate: {\n      scale: [1, scale, 1],\n      // Apply random scale factor in animation (subtle)\n      x: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0],\n      // Random, non-repeating X wiggles\n      y: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0] // Random, non-repeating Y wiggles\n    },\n    transition: {\n      duration: 3,\n      // Slower duration for smoother wiggle\n      ease: 'easeInOut',\n      repeat: Infinity,\n      // Keep repeating the wiggle\n      repeatType: 'loop' // Looping wiggle but more dynamic\n    },\n    whileHover: {\n      scale: 1,\n      // Pause the scale animation on hover (set to 1)\n      x: 0,\n      // Pause the wiggle on hover (set to 0)\n      y: 0,\n      // Pause the wiggle on hover (set to 0)\n      transition: {\n        scale: {\n          duration: 0.4,\n          ease: 'easeInOut'\n        } // Smooth transition for scale change\n      }\n    },\n    onClick: () => alert(`${name} clicked!`),\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(PulsatingButton, \"KA1YqHJWn/JsKCRdaaqgU3PjftA=\");\n_c = PulsatingButton;\nconst Hero = () => {\n  _s2();\n  const [circles, setCircles] = useState([]); // Array of circles\n  const [newCircleName, setNewCircleName] = useState(''); // State to store new circle name\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth); // Store screen width\n\n  // Function to update the screen width on resize\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Function to determine the number of circles per row based on screen width\n  const getCirclesPerRow = () => {\n    if (screenWidth < 600) {\n      return 1; // 1 circle per row for small screens\n    } else if (screenWidth < 900) {\n      return 2; // 2 circles per row for medium screens\n    } else {\n      return MAX_CIRCLES_PER_ROW; // 3 circles per row for larger screens\n    }\n  };\n\n  // Function to add one more circle to the page\n  const addCircle = () => {\n    // Prompt user for a name when adding a circle\n    const circleName = prompt('Name your group', 'Circle ' + (circles.length + 1)); // Default name is Circle X\n    if (circleName) {\n      const randomSize = generateRandomSize(); // Get a random size for this circle\n      setCircles(prevCircles => [...prevCircles, {\n        id: prevCircles.length + 1,\n        name: circleName,\n        size: randomSize\n      }]);\n    }\n  };\n\n  // Calculate the number of rows based on the total circles\n  const rows = Math.ceil(circles.length / getCirclesPerRow());\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: 20\n      },\n      children: Array.from({\n        length: rows\n      }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: 20\n        },\n        children: Array.from({\n          length: getCirclesPerRow()\n        }).map((_, colIndex) => {\n          const circleIndex = rowIndex * getCirclesPerRow() + colIndex; // Calculate the circle index\n          if (circleIndex < circles.length) {\n            const circle = circles[circleIndex];\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'relative',\n                width: BOX_WIDTH,\n                height: BOX_HEIGHT,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: /*#__PURE__*/_jsxDEV(PulsatingButton, {\n                text: circle.name,\n                name: circle.name,\n                size: circle.size\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 21\n              }, this)\n            }, circle.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this);\n          }\n          return null; // Don't render empty spots if no circle is there\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCircle,\n        style: {\n          padding: '10px 20px',\n          fontSize: '16px',\n          backgroundColor: '#3498db',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Add Circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s2(Hero, \"Cs92rbZx8ZnaYXSHVzikCG66b0o=\");\n_c2 = Hero;\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 10\n  }, this);\n};\n_c3 = Home;\nexport default Home;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"PulsatingButton\");\n$RefreshReg$(_c2, \"Hero\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","motion","jsxDEV","_jsxDEV","BOX_WIDTH","BOX_HEIGHT","MIN_BOX_WIDTH","MAX_CIRCLES_PER_ROW","generateRandomPositionInBox","top","Math","floor","random","left","generateRandomScale","generateRandomWiggle","generateRandomSize","PulsatingButton","text","name","size","_s","position","scale","button","style","width","height","borderRadius","backgroundColor","color","fontSize","fontWeight","display","alignItems","justifyContent","border","cursor","outline","animate","x","y","transition","duration","ease","repeat","Infinity","repeatType","whileHover","onClick","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Hero","_s2","circles","setCircles","newCircleName","setNewCircleName","screenWidth","setScreenWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","getCirclesPerRow","addCircle","circleName","prompt","length","randomSize","prevCircles","id","rows","ceil","flexDirection","gap","Array","from","map","_","rowIndex","colIndex","circleIndex","circle","marginTop","padding","_c2","Home","_c3","$RefreshReg$"],"sources":["/Users/ilyashilov/Documents/projects/ub-hacking-create-your-repo-here-koozie/app/src/components/pages/home/home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\n\n// Define default values\nconst BOX_WIDTH = 200;\nconst BOX_HEIGHT = 200;\nconst MIN_BOX_WIDTH = 150; // Minimum box width before we reduce the number of circles per row\nconst MAX_CIRCLES_PER_ROW = 3; // Max number of circles per row\n\n// Random position generation for each circle within the bounding box\nfunction generateRandomPositionInBox() {\n  const top = Math.floor(Math.random() * (BOX_HEIGHT - 100)); // Adjust for button height\n  const left = Math.floor(Math.random() * (BOX_WIDTH - 100)); // Adjust for button width\n  return { top, left };\n}\n\n// Random scale generation for each circle (between 1 and 1.2 for subtle size variations)\nfunction generateRandomScale() {\n  return 1 + Math.random() * 0.5; // Random scale between 1 and 1.5\n}\n\n// Random wiggle values for animation\nfunction generateRandomWiggle() {\n  return Math.random() * 10 - 5; // Random wiggle value between -5 and 5\n}\n\n// Random size for each circle (between 80px and 120px)\nfunction generateRandomSize() {\n  return Math.floor(Math.random() * (120 - 80 + 1)) + 80; // Random size between 80px and 120px\n}\n\nfunction PulsatingButton({ text, name, size }) {\n  const [position] = useState(generateRandomPositionInBox); // Get random position for each circle\n  const [scale] = useState(generateRandomScale); // Random scale factor\n\n  return (\n    <motion.button\n      style={{\n        position: 'absolute',\n        top: position.top,\n        left: position.left,\n        width: size, // Set circle size\n        height: size, // Set circle size\n        borderRadius: '50%',\n        backgroundColor: '#1A06D0', // Default background color\n        color: 'white',\n        fontSize: '16px',\n        fontWeight: 'bold',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: 'none',\n        cursor: 'pointer',\n        outline: 'none',\n      }}\n      animate={{\n        scale: [1, scale, 1], // Apply random scale factor in animation (subtle)\n        x: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0], // Random, non-repeating X wiggles\n        y: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0], // Random, non-repeating Y wiggles\n      }}\n      transition={{\n        duration: 3, // Slower duration for smoother wiggle\n        ease: 'easeInOut',\n        repeat: Infinity, // Keep repeating the wiggle\n        repeatType: 'loop', // Looping wiggle but more dynamic\n      }}\n      whileHover={{\n        scale: 1, // Pause the scale animation on hover (set to 1)\n        x: 0, // Pause the wiggle on hover (set to 0)\n        y: 0, // Pause the wiggle on hover (set to 0)\n        transition: { \n          scale: { duration: 0.4, ease: 'easeInOut' }, // Smooth transition for scale change\n        },\n      }}\n      onClick={() => alert(`${name} clicked!`)}\n    >\n      {text}\n    </motion.button>\n  );\n}\n\nconst Hero = () => {\n  const [circles, setCircles] = useState([]); // Array of circles\n  const [newCircleName, setNewCircleName] = useState(''); // State to store new circle name\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth); // Store screen width\n\n  // Function to update the screen width on resize\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Function to determine the number of circles per row based on screen width\n  const getCirclesPerRow = () => {\n    if (screenWidth < 600) {\n      return 1; // 1 circle per row for small screens\n    } else if (screenWidth < 900) {\n      return 2; // 2 circles per row for medium screens\n    } else {\n      return MAX_CIRCLES_PER_ROW; // 3 circles per row for larger screens\n    }\n  };\n\n  // Function to add one more circle to the page\n  const addCircle = () => {\n    // Prompt user for a name when adding a circle\n    const circleName = prompt('Name your group', 'Circle ' + (circles.length + 1)); // Default name is Circle X\n    if (circleName) {\n      const randomSize = generateRandomSize(); // Get a random size for this circle\n      setCircles(prevCircles => [\n        ...prevCircles,\n        { id: prevCircles.length + 1, name: circleName, size: randomSize },\n      ]);\n    }\n  };\n\n  // Calculate the number of rows based on the total circles\n  const rows = Math.ceil(circles.length / getCirclesPerRow());\n\n  return (\n    <section>\n      {/* Body with Circles */}\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 20 }}>\n        {/* Create rows dynamically */}\n        {Array.from({ length: rows }).map((_, rowIndex) => (\n          <div key={rowIndex} style={{ display: 'flex', gap: 20 }}>\n            {/* Create dynamic number of circles per row */}\n            {Array.from({ length: getCirclesPerRow() }).map((_, colIndex) => {\n              const circleIndex = rowIndex * getCirclesPerRow() + colIndex; // Calculate the circle index\n              if (circleIndex < circles.length) {\n                const circle = circles[circleIndex];\n                return (\n                  <div\n                    key={circle.id}\n                    style={{\n                      position: 'relative',\n                      width: BOX_WIDTH,\n                      height: BOX_HEIGHT,\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                    }}\n                  >\n                    <PulsatingButton text={circle.name} name={circle.name} size={circle.size} />\n                  </div>\n                );\n              }\n              return null; // Don't render empty spots if no circle is there\n            })}\n          </div>\n        ))}\n      </div>\n\n      {/* Add Circle Button */}\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\n        <button\n          onClick={addCircle}\n          style={{\n            padding: '10px 20px',\n            fontSize: '16px',\n            backgroundColor: '#3498db',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer',\n          }}\n        >\n          Add Circle\n        </button>\n      </div>\n    </section>\n  );\n};\n\nconst Home = () => {\n  return <Hero />;\n};\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}