{"ast":null,"code":"var _jsxFileName = \"/Users/ilyashilov/Documents/projects/ub-hacking-create-your-repo-here-koozie/app/src/components/pages/home/home.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport * as ReactDOMClient from 'react-dom/client';\n\n// Define box dimensions and spacing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOX_WIDTH = 200;\nconst BOX_HEIGHT = 200;\nconst COLUMNS = 3; // 3 circles per row\n\n// Random position generation for each circle within the bounding box\nfunction generateRandomPositionInBox() {\n  const top = Math.floor(Math.random() * (BOX_HEIGHT - 100)); // Adjust for button height\n  const left = Math.floor(Math.random() * (BOX_WIDTH - 100)); // Adjust for button width\n  return {\n    top,\n    left\n  };\n}\n\n// Random scale generation for each circle (between 1 and 1.2 for subtle size variations)\nfunction generateRandomScale() {\n  return 1 + Math.random() * 0.5; // Random scale between 1 and 1.5\n}\n\n// Random wiggle values for animation\nfunction generateRandomWiggle() {\n  return Math.random() * 10 - 5; // Random wiggle value between -5 and 5\n}\n\n// Random size for each circle (between 80px and 120px)\nfunction generateRandomSize() {\n  return Math.floor(Math.random() * (120 - 80 + 1)) + 80; // Random size between 80px and 120px\n}\nfunction PulsatingButton({\n  text,\n  name,\n  size\n}) {\n  _s();\n  const [position] = useState(generateRandomPositionInBox); // Get random position for each circle\n  const [scale] = useState(generateRandomScale); // Random scale factor\n\n  return /*#__PURE__*/_jsxDEV(motion.button, {\n    style: {\n      position: 'absolute',\n      top: position.top,\n      left: position.left,\n      width: size,\n      // Set circle size\n      height: size,\n      // Set circle size\n      borderRadius: '50%',\n      backgroundColor: '#1A06D0',\n      color: 'white',\n      fontSize: '16px',\n      fontWeight: 'bold',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      border: 'none',\n      cursor: 'pointer',\n      outline: 'none'\n    },\n    animate: {\n      scale: [1, scale, 1],\n      // Apply random scale factor in animation (subtle)\n      x: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0],\n      // Random, non-repeating X wiggles\n      y: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0] // Random, non-repeating Y wiggles\n    },\n    transition: {\n      duration: 3,\n      // Slower duration for smoother wiggle\n      ease: 'easeInOut',\n      repeat: Infinity,\n      // Keep repeating the wiggle\n      repeatType: 'loop' // Looping wiggle but more dynamic\n    },\n    whileHover: {\n      scale: scale + 0.05,\n      // Slightly increase scale on hover (subtle hover effect)\n      backgroundColor: '#0D1F8B',\n      // Darker background when hovering\n      transition: {\n        scale: {\n          duration: 0.4,\n          ease: 'easeInOut'\n        },\n        // Smooth transition for scale change\n        backgroundColor: {\n          duration: 0.2\n        } // Transition for background color\n      }\n    },\n    onClick: () => alert(`${name} clicked!`),\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(PulsatingButton, \"KA1YqHJWn/JsKCRdaaqgU3PjftA=\");\n_c = PulsatingButton;\nconst Hero = () => {\n  _s2();\n  const [circles, setCircles] = useState([]); // Array of circles\n  const [newCircleName, setNewCircleName] = useState(''); // State to store new circle name\n\n  // Function to add one more circle to the page\n  const addCircle = () => {\n    // Prompt user for a name when adding a circle\n    const circleName = prompt('Name your group', 'Circle ' + (circles.length + 1)); // Default name is Circle X\n    if (circleName) {\n      const randomSize = generateRandomSize(); // Get a random size for this circle\n      setCircles(prevCircles => [...prevCircles, {\n        id: prevCircles.length + 1,\n        name: circleName,\n        size: randomSize\n      }]);\n    }\n  };\n\n  // Calculate the number of rows based on the total circles\n  const rows = Math.ceil(circles.length / COLUMNS);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: 20\n      },\n      children: Array.from({\n        length: rows\n      }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: 20\n        },\n        children: Array.from({\n          length: COLUMNS\n        }).map((_, colIndex) => {\n          const circleIndex = rowIndex * COLUMNS + colIndex; // Calculate the circle index\n          if (circleIndex < circles.length) {\n            const circle = circles[circleIndex];\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'relative',\n                width: BOX_WIDTH,\n                height: BOX_HEIGHT,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: /*#__PURE__*/_jsxDEV(PulsatingButton, {\n                text: circle.name,\n                name: circle.name,\n                size: circle.size\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 21\n              }, this)\n            }, circle.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this);\n          }\n          return null; // Don't render empty spots if no circle is there\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCircle,\n        style: {\n          padding: '10px 20px',\n          fontSize: '16px',\n          backgroundColor: '#3498db',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Add Circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s2(Hero, \"AqxDd+Ghdjqjj82dfU708ZRwsOc=\");\n_c2 = Hero;\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 10\n  }, this);\n};\n_c3 = Home;\nexport default Home;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"PulsatingButton\");\n$RefreshReg$(_c2, \"Hero\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"names":["React","useState","motion","ReactDOMClient","jsxDEV","_jsxDEV","BOX_WIDTH","BOX_HEIGHT","COLUMNS","generateRandomPositionInBox","top","Math","floor","random","left","generateRandomScale","generateRandomWiggle","generateRandomSize","PulsatingButton","text","name","size","_s","position","scale","button","style","width","height","borderRadius","backgroundColor","color","fontSize","fontWeight","display","alignItems","justifyContent","border","cursor","outline","animate","x","y","transition","duration","ease","repeat","Infinity","repeatType","whileHover","onClick","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Hero","_s2","circles","setCircles","newCircleName","setNewCircleName","addCircle","circleName","prompt","length","randomSize","prevCircles","id","rows","ceil","flexDirection","gap","Array","from","map","_","rowIndex","colIndex","circleIndex","circle","marginTop","padding","_c2","Home","_c3","$RefreshReg$"],"sources":["/Users/ilyashilov/Documents/projects/ub-hacking-create-your-repo-here-koozie/app/src/components/pages/home/home.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport * as ReactDOMClient from 'react-dom/client';\n\n// Define box dimensions and spacing\nconst BOX_WIDTH = 200;\nconst BOX_HEIGHT = 200;\nconst COLUMNS = 3; // 3 circles per row\n\n// Random position generation for each circle within the bounding box\nfunction generateRandomPositionInBox() {\n  const top = Math.floor(Math.random() * (BOX_HEIGHT - 100)); // Adjust for button height\n  const left = Math.floor(Math.random() * (BOX_WIDTH - 100)); // Adjust for button width\n  return { top, left };\n}\n\n// Random scale generation for each circle (between 1 and 1.2 for subtle size variations)\nfunction generateRandomScale() {\n  return 1 + Math.random() * 0.5; // Random scale between 1 and 1.5\n}\n\n// Random wiggle values for animation\nfunction generateRandomWiggle() {\n  return Math.random() * 10 - 5; // Random wiggle value between -5 and 5\n}\n\n// Random size for each circle (between 80px and 120px)\nfunction generateRandomSize() {\n  return Math.floor(Math.random() * (120 - 80 + 1)) + 80; // Random size between 80px and 120px\n}\n\nfunction PulsatingButton({ text, name, size }) {\n  const [position] = useState(generateRandomPositionInBox); // Get random position for each circle\n  const [scale] = useState(generateRandomScale); // Random scale factor\n\n  return (\n    <motion.button\n      style={{\n        position: 'absolute',\n        top: position.top,\n        left: position.left,\n        width: size, // Set circle size\n        height: size, // Set circle size\n        borderRadius: '50%',\n        backgroundColor: '#1A06D0',\n        color: 'white',\n        fontSize: '16px',\n        fontWeight: 'bold',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: 'none',\n        cursor: 'pointer',\n        outline: 'none',\n      }}\n      animate={{\n        scale: [1, scale, 1], // Apply random scale factor in animation (subtle)\n        x: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0], // Random, non-repeating X wiggles\n        y: [0, generateRandomWiggle(), generateRandomWiggle(), generateRandomWiggle(), 0], // Random, non-repeating Y wiggles\n      }}\n      transition={{\n        duration: 3, // Slower duration for smoother wiggle\n        ease: 'easeInOut',\n        repeat: Infinity, // Keep repeating the wiggle\n        repeatType: 'loop', // Looping wiggle but more dynamic\n      }}\n      whileHover={{\n        scale: scale + 0.05, // Slightly increase scale on hover (subtle hover effect)\n        backgroundColor: '#0D1F8B', // Darker background when hovering\n        transition: { \n          scale: { duration: 0.4, ease: 'easeInOut' }, // Smooth transition for scale change\n          backgroundColor: { duration: 0.2 }, // Transition for background color\n        },\n      }}\n      onClick={() => alert(`${name} clicked!`)}\n    >\n      {text}\n    </motion.button>\n  );\n}\n\nconst Hero = () => {\n  const [circles, setCircles] = useState([]); // Array of circles\n  const [newCircleName, setNewCircleName] = useState(''); // State to store new circle name\n\n  // Function to add one more circle to the page\n  const addCircle = () => {\n    // Prompt user for a name when adding a circle\n    const circleName = prompt('Name your group', 'Circle ' + (circles.length + 1)); // Default name is Circle X\n    if (circleName) {\n      const randomSize = generateRandomSize(); // Get a random size for this circle\n      setCircles(prevCircles => [\n        ...prevCircles,\n        { id: prevCircles.length + 1, name: circleName, size: randomSize },\n      ]);\n    }\n  };\n\n  // Calculate the number of rows based on the total circles\n  const rows = Math.ceil(circles.length / COLUMNS);\n\n  return (\n    <section>\n      {/* Body with Circles */}\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 20 }}>\n        {/* Create rows dynamically */}\n        {Array.from({ length: rows }).map((_, rowIndex) => (\n          <div key={rowIndex} style={{ display: 'flex', gap: 20 }}>\n            {/* Create 3 circles per row */}\n            {Array.from({ length: COLUMNS }).map((_, colIndex) => {\n              const circleIndex = rowIndex * COLUMNS + colIndex; // Calculate the circle index\n              if (circleIndex < circles.length) {\n                const circle = circles[circleIndex];\n                return (\n                  <div\n                    key={circle.id}\n                    style={{\n                      position: 'relative',\n                      width: BOX_WIDTH,\n                      height: BOX_HEIGHT,\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                    }}\n                  >\n                    <PulsatingButton text={circle.name} name={circle.name} size={circle.size} />\n                  </div>\n                );\n              }\n              return null; // Don't render empty spots if no circle is there\n            })}\n          </div>\n        ))}\n      </div>\n\n      {/* Add Circle Button */}\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\n        <button\n          onClick={addCircle}\n          style={{\n            padding: '10px 20px',\n            fontSize: '16px',\n            backgroundColor: '#3498db',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer',\n          }}\n        >\n          Add Circle\n        </button>\n      </div>\n    </section>\n  );\n};\n\nconst Home = () => {\n  return <Hero />;\n};\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}